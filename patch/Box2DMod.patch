 Box2D/Collision/Shapes/b2ChainShape.cpp |  2 ++
 Box2D/Common/b2Assert.h                 | 27 +++++++++++++++++++++
 Box2D/Common/b2Math.h                   | 43 +++++++++++++++++++++------------
 Box2D/Common/b2Settings.h               |  5 ++++
 4 files changed, 61 insertions(+), 16 deletions(-)

diff --git a/Box2D/Collision/Shapes/b2ChainShape.cpp b/Box2D/Collision/Shapes/b2ChainShape.cpp
index bd23346..d52ed2a 100644
--- a/Box2D/Collision/Shapes/b2ChainShape.cpp
+++ b/Box2D/Collision/Shapes/b2ChainShape.cpp
@@ -35,6 +35,7 @@ void b2ChainShape::CreateLoop(const b2Vec2* vertices, int32 count)
 	b2Assert(count >= 3);
 	m_count = count + 1;
 	m_vertices = (b2Vec2*)b2Alloc(m_count * sizeof(b2Vec2));
+	b2Assert(m_vertices != NULL);
 	memcpy(m_vertices, vertices, count * sizeof(b2Vec2));
 	m_vertices[count] = m_vertices[0];
 	m_prevVertex = m_vertices[m_count - 2];
@@ -49,6 +50,7 @@ void b2ChainShape::CreateChain(const b2Vec2* vertices, int32 count)
 	b2Assert(count >= 2);
 	m_count = count;
 	m_vertices = (b2Vec2*)b2Alloc(count * sizeof(b2Vec2));
+	b2Assert(m_vertices != NULL);
 	memcpy(m_vertices, vertices, m_count * sizeof(b2Vec2));
 	m_hasPrevVertex = false;
 	m_hasNextVertex = false;
diff --git a/Box2D/Common/b2Assert.h b/Box2D/Common/b2Assert.h
new file mode 100644
index 0000000..d616ee0
--- /dev/null
+++ b/Box2D/Common/b2Assert.h
@@ -0,0 +1,27 @@
+/*
+ * @summary: box2d assert
+ * @date: 2012-11-21
+ * @author: zl
+ */
+
+#ifndef B2ASSERT_H_
+#define B2ASSERT_H_
+
+
+#define BOOST_PYTHON_STATIC_LIB
+#include <boost/python.hpp>
+
+#undef b2Assert
+#define b2Assert(e) ((e) ? (void)0: _b2_assert(#e, __FILE__, __LINE__))
+
+
+inline void _b2_assert(const char* arg1, const char* arg2, int lineno)
+{
+	using namespace boost::python;
+
+	PyErr_SetString(PyExc_AssertionError, arg1);
+	throw_error_already_set();
+}
+
+
+#endif /* B2ASSERT_H_ */
diff --git a/Box2D/Common/b2Math.h b/Box2D/Common/b2Math.h
index 11c7070..7e4bfaf 100644
--- a/Box2D/Common/b2Math.h
+++ b/Box2D/Common/b2Math.h
@@ -66,6 +66,9 @@ struct b2Vec2
 	/// Default constructor does nothing (for performance).
 	b2Vec2() {}
 
+	/// Construct using other.
+	b2Vec2(const b2Vec2& v) : x(v.x), y(v.y) {}
+
 	/// Construct using coordinates.
 	b2Vec2(float32 x, float32 y) : x(x), y(y) {}
 
@@ -157,6 +160,9 @@ struct b2Vec3
 	/// Default constructor does nothing (for performance).
 	b2Vec3() {}
 
+	/// Construct using other.
+	b2Vec3(const b2Vec3& v) : x(v.x), y(v.y), z(v.z) {}
+
 	/// Construct using coordinates.
 	b2Vec3(float32 x, float32 y, float32 z) : x(x), y(y), z(z) {}
 
@@ -196,19 +202,14 @@ struct b2Mat22
 	/// The default constructor does nothing (for performance).
 	b2Mat22() {}
 
+	/// Construct this matrix using other.
+	b2Mat22(const b2Mat22& other) : ex(other.ex), ey(other.ey) {}
+
 	/// Construct this matrix using columns.
-	b2Mat22(const b2Vec2& c1, const b2Vec2& c2)
-	{
-		ex = c1;
-		ey = c2;
-	}
+	b2Mat22(const b2Vec2& c1, const b2Vec2& c2) : ex(c1), ey(c2) {}
 
 	/// Construct this matrix using scalars.
-	b2Mat22(float32 a11, float32 a12, float32 a21, float32 a22)
-	{
-		ex.x = a11; ex.y = a21;
-		ey.x = a12; ey.y = a22;
-	}
+	b2Mat22(float32 a11, float32 a12, float32 a21, float32 a22) : ex(a11, a21), ey(a12, a12) {}
 
 	/// Initialize this matrix using columns.
 	void Set(const b2Vec2& c1, const b2Vec2& c2)
@@ -270,13 +271,17 @@ struct b2Mat33
 	/// The default constructor does nothing (for performance).
 	b2Mat33() {}
 
+	/// Construct this matrix using other.
+	b2Mat33(const b2Mat33& other) : ex(other.ex), ey(other.ey), ez(other.ez) {}
+
 	/// Construct this matrix using columns.
-	b2Mat33(const b2Vec3& c1, const b2Vec3& c2, const b2Vec3& c3)
-	{
-		ex = c1;
-		ey = c2;
-		ez = c3;
-	}
+	b2Mat33(const b2Vec3& c1, const b2Vec3& c2, const b2Vec3& c3) : ex(c1), ey(c2), ez(c3) {}
+
+	/// Construct this matrix using scalars.
+	b2Mat33(float32 a11, float32 a12, float32 a13,
+			float32 a21, float32 a22, float32 a23,
+			float32 a31, float32 a32, float32 a33)
+		: ex(a11, a21, a31), ey(a12, a22, a32), ez(a13, a23, a33) {}
 
 	/// Set this matrix to all zeros.
 	void SetZero()
@@ -311,6 +316,9 @@ struct b2Rot
 {
 	b2Rot() {}
 
+	/// Initialize from other
+	b2Rot(const b2Rot& other) : s(other.s), c(other.c) {}
+
 	/// Initialize from an angle in radians
 	explicit b2Rot(float32 angle)
 	{
@@ -363,6 +371,9 @@ struct b2Transform
 	/// The default constructor does nothing.
 	b2Transform() {}
 
+	/// Initialize using other.
+	b2Transform(const b2Transform& other) : p(other.p), q(other.q) {}
+
 	/// Initialize using a position vector and a rotation.
 	b2Transform(const b2Vec2& position, const b2Rot& rotation) : p(position), q(rotation) {}
 
diff --git a/Box2D/Common/b2Settings.h b/Box2D/Common/b2Settings.h
index 44c0eb1..e07a054 100644
--- a/Box2D/Common/b2Settings.h
+++ b/Box2D/Common/b2Settings.h
@@ -25,6 +25,11 @@
 #define B2_NOT_USED(x) ((void)(x))
 #define b2Assert(A) assert(A)
 
+#define EXPORT_B2ASSERT_ERROR
+#if defined(EXPORT_B2ASSERT_ERROR)
+#include <Box2D/Common/b2Assert.h>
+#endif
+
 typedef signed char	int8;
 typedef signed short int16;
 typedef signed int int32;
